from browser import document, html, window, timer, bind
import time
import random


'''
***********************************************
**************   anim text effect  ************
***********************************************
'''
# anim_length = 4900 #4.9s


anim_region = document["anim_region"]
sentence_bg = html.DIV(Class='sentence_region',style={"z-index":"-1","top":"-12vh"})
sentence0 = html.DIV(Class='sentence_region',style={"z-index":"-2"})
sentence1 = html.DIV(Class='sentence_region',style={"z-index":"-3","top":"12vh"})
sentence2 = html.DIV(Class='sentence_region',style={"z-index":"-4","top":"24vh"})


T0 = '202020202020'
T1 = 'EBIRD TAIWAN'
T2 = 'AUTUMN CHALLENGE'
T3 = '2020 秋季臺北觀鳥大賽'

string_seq = list(' ABCDEFGHIJKLMNOPQRSTUVWXYZ')
num_seq = list('012')
T0_delays = [0]
changing_text_delay = 45

for s in T0:
    T0_delays.append(num_seq.index(s)+T0_delays[-1])
T1_delays = [0]
for s in T1:
    T1_delays.append(string_seq.index(s)+T1_delays[-1])
T2_delays = [0]
for s in T2:
    T2_delays.append(string_seq.index(s)+T2_delays[-1])

character_width = 4

for i in range(24):    
    if i%2 == 0:
        sentence0 <= html.DIV('2', Class = 'anim_letter odd_letter', style={"left":f"{i*character_width}vw"})
        sentence1 <= html.DIV('2', Class = 'anim_letter odd_letter', style={"left":f"{i*character_width}vw",})
        sentence2 <= html.DIV('2', Class = 'anim_letter odd_letter', style={"left":f"{i*character_width}vw",})        
    else:
        sentence0 <= html.DIV('0', Class = 'anim_letter even_letter', style={"left":f"{i*character_width}vw"})
        sentence1 <= html.DIV('0', Class = 'anim_letter even_letter', style={"left":f"{i*character_width}vw",})
        sentence2 <= html.DIV('0', Class = 'anim_letter even_letter', style={"left":f"{i*character_width}vw",})        


# anim_region<=html.DIV(Class='sentence_region',style={"z-index":"0","top":"-6rem"})

def change_text():
    pass

rt = 0 #real tick
dt = 0 #delta time
run = None
ch = 0

s0_letter_index = 0
s1_letter_index = 0
s2_letter_index = 0
s3_letter_index = 0 # for the additional line

s0_seq_index = 0
s1_seq_index = 0
s2_seq_index = 0


'''
randomly assign 5 groups for moving around
'''
# try random timing transition
for e in document.select('div.anim_letter'):
    e.attrs['class'] += f' G{random.randint(1,5)}'
    # eval(f'G{random.randint(1,5)}.append(e)')

allow_change_20 = True

'''
unit of dt is fps (it is about 60 fps)
move for 24f, stay 6s, and another loop
'''


def render():
    global rt
    global dt
    global ch
    global s0_letter_index
    global s1_letter_index
    global s2_letter_index
    global s0_seq_index
    global s1_seq_index
    global s2_seq_index

    global s3_letter_index

    global allow_change_20

    dt += 1

    if dt % 30 == 6:
        for e in document.select('div.G1'):
            e.style.transition='transform 0.3s ease-in-out'
            e.style.transform='translateY(-2rem)'
        for e in document.select('div.G2'):
            e.style.transition='none'
            e.style.transform='translateY(0)'
            if allow_change_20: e.text = list('20')[ch%2]
    if dt % 30 == 12:
        for e in document.select('div.G2'):
            e.style.transition='transform 0.3s ease-in-out'
            e.style.transform='translateY(-2rem)'
        for e in document.select('div.G3'):
            e.style.transition='none'
            e.style.transform='translateY(0)'
            if allow_change_20: e.text = list('20')[(ch+1)%2]

    if dt % 30 == 18:
        for e in document.select('div.G3'):
            e.style.transition='transform 0.3s ease-in-out'
            e.style.transform='translateY(-2rem)'
        for e in document.select('div.G4'):
            e.style.transition='none'
            e.style.transform='translateY(0)'
            if allow_change_20: e.text = list('20')[ch%2]

    if dt % 30 == 24:
        for e in document.select('div.G4'):
            e.style.transition='transform 0.3s ease-in-out'
            e.style.transform='translateY(-2rem)'
        for e in document.select('div.G5'):
            e.style.transition='none'
            e.style.transform='translateY(0)'
            if allow_change_20: e.text = list('20')[(ch+1)%2]

    if dt % 30 == 0:
        for e in document.select('div.G5'):
            e.style.transition='transform 0.3s ease-in-out'
            e.style.transform='translateY(-2rem)'
        for e in document.select('div.G1'):
            e.style.transition='none'
            e.style.transform='translateY(0)'
            if allow_change_20: e.text = list('20')[ch%2]
        ch+=1

    if (dt - changing_text_delay > T0_delays[s0_letter_index] and s0_letter_index<len(T0)):
        s0_target_letter = sentence0.children[s0_letter_index]
        if s0_seq_index == 0:
            s0_target_letter.attrs['class'] = 'anim_changing_letter'
            s0_target_letter.style.transition='none'
            s0_target_letter.style.transform = 'translateY(0px)'
        s0_target_letter.text = num_seq[s0_seq_index]
        s0_seq_index +=1
        if num_seq[s0_seq_index-1] == T0[s0_letter_index]:
            s0_seq_index = 0
            s0_letter_index += 1

    if (dt - changing_text_delay > T1_delays[s1_letter_index] and s1_letter_index<len(T1)):
        s1_target_letter = sentence1.children[s1_letter_index]
        if s1_seq_index == 0:
            s1_target_letter.attrs['class'] = 'anim_changing_letter'
            s1_target_letter.style.transition='none'
            s1_target_letter.style.transform = 'translateY(0px)'
        s1_target_letter.text = string_seq[s1_seq_index]
        s1_seq_index +=1
        if string_seq[s1_seq_index-1] == T1[s1_letter_index]:
            s1_seq_index = 0
            s1_letter_index += 1

    if (dt - changing_text_delay > T2_delays[s2_letter_index] and s2_letter_index<len(T2)):
        s2_target_letter = sentence2.children[s2_letter_index]
        if s2_seq_index == 0:
            s2_target_letter.attrs['class'] = 'anim_changing_letter'
            s2_target_letter.style.transition='none'
            s2_target_letter.style.transform = 'translateY(0px)'
        s2_target_letter.text = string_seq[s2_seq_index]
        s2_seq_index +=1
        if string_seq[s2_seq_index-1] == T2[s2_letter_index]:
            s2_seq_index = 0
            s2_letter_index += 1

            # if s2_letter_index == len(T2):
            #     print(f'final_frame: {dt}')
    if dt == 200:
        reset_20()

    if dt > 218: # 218 is the final frame to render T2                     
        document['secondary_title'].text = T3[0:s3_letter_index]
        if (dt-218)%7 == 0: # update text per 3 frame
            s3_letter_index +=1
        if s3_letter_index > len(T3):
            cancel_anim()

def animloop(t):
    global run
    run = window.requestAnimationFrame(animloop)
    render()

def cancel_anim():
    global run

    window.cancelAnimationFrame(run)
    run = None
    for e in document.select('div.anim_letter'):
        e.style.transition='none'
        e.style.transform='translateY(0px)'
        if 'odd_letter' in e.attrs['class']:
            e.text='2'
        if 'even_letter' in e.attrs['class']:
            e.text='0'
    timer.set_timeout(show_banner, 500)
    # display banner

def show_banner():
    document['banner_img'].style.display = 'block'

    # sentence3.style.display="none"
    print('anim_stopped')

def reset_20():
    global allow_change_20
    allow_change_20=False
    for e in document.select('div.anim_letter'):
        e.style.transition='none'
        e.style.transform='translateY(0px)'
        if 'odd_letter' in e.attrs['class']:
            e.text='2'
        if 'even_letter' in e.attrs['class']:
            e.text='0'


'''
unit of timer is 1 ms (1000 = 1s)
'''
def start_anim(event):
    animloop(1)
    # timer.set_timeout(cancel_anim, anim_length)
    # timer.set_timeout(reset_20, anim_length - 50)        

'''
the responsive controll
'''

if window.innerWidth > 768:
    anim_region<=sentence_bg
    anim_region<=sentence0
    anim_region<=sentence1
    anim_region<=sentence2
    anim_region<= html.P('',Class='sentence_region Ctitle', id='secondary_title')

    document<=html.DIV(id='hidden_trigger', style={'display':'none'})
    document['hidden_trigger'].bind('click', start_anim)
    document['hidden_trigger'].click()
else:
    document<=html.DIV(id='mobile_region')
    document['mobile_region']<=html.P('2020秋季臺北觀鳥大賽', style={'font-size':'9vw'})
    document['mobile_region']<=html.P('AUTUMN CHALLENGE', style={'font-size':'9vw', 'color':'#607B49'})
    document['mobile_region']<=document['banner_img']
    document['banner_img'].attrs['class'] = ''
    document['banner_img'].style = {'padding':'5vh 0 0 10%','display':'block','width':'80%','height':'auto'}
    # position

# all dir(browser.window)

# ['DashRenderer', 'InstallTrigger', 'PropTypes', 'React',
# 'ReactDOM', '__BRYTHON__', '__core-js_shared__',
# '_babelPolyfill', 'addEventListener', 'alert', 'applicationCache',
# 'atob', 'blur', 'brython', 'btoa', 'caches', 'callable_iterator',
# 'cancelAnimationFrame', 'cancelIdleCallback', 'captureEvents',
# 'clearImmediate', 'clearInterval', 'clearTimeout', 'close', 'closed',
# 'code', 'confirm', 'core', 'createImageBitmap', 'crossOriginIsolated',
# 'crypto', 'cursor', 'customElements', 'dash_bootstrap_components',
# 'dash_core_components', 'dash_html_components', 'dash_renderer',
# 'dash_table', 'devicePixelRatio', 'dict_view_op', 'dispatchEvent',
# 'docs', 'document', 'dpd_components', 'dump', 'external', 'f', 'fetch',
# 'find', 'focus', 'frameElement', 'frames', 'fullScreen', 'gc',
# 'getComputedStyle', 'getDefaultComputedStyle', 'getSelection',
# 'get_postMessage', 'history', 'i', 'indexedDB', 'innerHeight',
# 'innerWidth', 'isSecureContext', 'key', 'length', 'localStorage',
# 'location', 'locationbar', 'matchMedia', 'menubar', 'moveBy', 'moveTo',
# 'mozInnerScreenX', 'mozInnerScreenY', 'name', 'navigator', 'onabort', 
# 'onabsolutedeviceorientation', 'onafterprint', 'onanimationcancel', 
# 'onanimationend', 'onanimationiteration', 'onanimationstart', 
# 'onauxclick', 'onbeforeprint', 'onbeforeunload', 'onblur', 'oncanplay', 
# 'oncanplaythrough', 'onchange', 'onclick', 'onclose', 'oncontextmenu', 
# 'oncuechange', 'ondblclick', 'ondevicelight', 'ondevicemotion', 'ondeviceorientation', 
# 'ondeviceproximity', 'ondrag', 'ondragend', 'ondragenter', 'ondragexit', 'ondragleave', 
# 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 
# 'onerror', 'onfocus', 'onformdata', 'ongotpointercapture', 'onhashchange', 'oninput', 
# 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onlanguagechange', 'onload', 
# 'onloadeddata', 'onloadedmetadata', 'onloadend', 'onloadstart', 'onlostpointercapture', 
# 'onmessage', 'onmessageerror', 'onmousedown', 'onmouseenter', 'onmouseleave', 
# 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmozfullscreenchange', 
# 'onmozfullscreenerror', 'onoffline', 'ononline', 'onpagehide', 'onpageshow', 'onpause', 
# 'onplay', 'onplaying', 'onpointercancel', 'onpointerdown', 'onpointerenter', 
# 'onpointerleave', 'onpointermove', 'onpointerout', 'onpointerover', 'onpointerup', 
# 'onpopstate', 'onprogress', 'onratechange', 'onrejectionhandled', 'onreset', 'onresize', 
# 'onscroll', 'onseeked', 'onseeking', 'onselect', 'onselectstart', 'onshow', 'onstalled', 
# 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'ontransitioncancel', 
# 'ontransitionend', 'ontransitionrun', 'ontransitionstart', 'onunhandledrejection', 
# 'onunload', 'onuserproximity', 'onvolumechange', 'onwaiting', 'onwebkitanimationend', 
# 'onwebkitanimationiteration', 'onwebkitanimationstart', 'onwebkittransitionend', 
# 'onwheel', 'open', 'opener', 'origin', 'outerHeight', 'outerWidth', 'pageXOffset', 
# 'pageYOffset', 'parent', 'performance', 'personalbar', 'postMessage', 'print', 
# 'prompt', 'py', 'queueMicrotask', 'regeneratorRuntime', 'releaseEvents', 
# 'removeEventListener', 'renderer', 'requestAnimationFrame', 'requestIdleCallback', 
# 'resizeBy', 'resizeTo', 'screen', 'screenLeft', 'screenTop', 'screenX', 'screenY', 
# 'scripts', 'scroll', 'scrollBy', 'scrollByLines', 'scrollByPages', 'scrollMaxX', 
# 'scrollMaxY', 'scrollTo', 'scrollX', 'scrollY', 'scrollbars', 'self', 'sessionStorage', 
# 'setImmediate', 'setInterval', 'setResizable', 'setTimeout', 'set_class_item', 'sidebar', 
# 'sizeToContent', 'speechSynthesis', 'status', 'statusbar', 'stop', 'store', 
# 'subelse_node', 'to_js', 'toolbar', 'top', 'u2f', 'updateCommands', 
# 'webpackJsonpdash_core_components', 'webpackJsonpdash_table', 'window']